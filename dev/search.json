[{"path":"/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 cereal authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Julia Silge. Maintainer, author. Davis Vaughan. Author. . Copyright holder, funder.","code":""},{"path":"/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Silge J, Vaughan D (2025). cereal: Serialize 'vctrs' Objects 'JSON'. R package version 0.1.0.9000, https://r-lib.github.io/cereal/.","code":"@Manual{,   title = {cereal: Serialize 'vctrs' Objects to 'JSON'},   author = {Julia Silge and Davis Vaughan},   year = {2025},   note = {R package version 0.1.0.9000},   url = {https://r-lib.github.io/cereal/}, }"},{"path":"/dev/index.html","id":"cereal-","dir":"","previous_headings":"","what":"Serialize vctrs Objects to JSON","title":"Serialize vctrs Objects to JSON","text":"goal cereal provide methods serialize objects vctrs JSON, well back JSON vctrs objects.","code":""},{"path":"/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Serialize vctrs Objects to JSON","text":"can install released version vetiver CRAN : can install development version cereal GitHub :","code":"install.packages(\"cereal\") # install.packages(\"pak\") pak::pak(\"r-lib/cereal\")"},{"path":"/dev/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Serialize vctrs Objects to JSON","text":"data frame rectangular collection variables (columns) observations (rows). variable vector one data type, like factor datetime: vctrs package concept vector prototype captures metadata associated vector without keeping data . information stored vector prototype includes, example, levels factor timezone datetime. can useful important information deploying code models, using vetiver. store vector prototype R binary object saved .rds file, cereal, can store vector prototype plain text JSON: Storing prototype information JSON (rather binary file) means can used plain-text metadata model. can also convert JSON back original prototype: approach task using Python, see Pydantic’s model.json().","code":"df <- tibble::tibble(   a = c(1.2, 2.3, 3.4),   b = 2L:4L,   c = Sys.Date() + 0:2,   d = as.POSIXct(\"2019-01-01\", tz = \"America/New_York\") + 100:102,   e = sample(letters, 3),   f = factor(c(\"blue\", \"blue\", \"green\"), levels = c(\"blue\", \"green\", \"red\")),   g = ordered(c(\"small\", \"large\", \"medium\"), levels = c(\"small\", \"medium\", \"large\")) )  df #> # A tibble: 3 × 7 #>       a     b c          d                   e     f     g      #>   <dbl> <int> <date>     <dttm>              <chr> <fct> <ord>  #> 1   1.2     2 2023-06-09 2019-01-01 00:01:40 b     blue  small  #> 2   2.3     3 2023-06-10 2019-01-01 00:01:41 p     blue  large  #> 3   3.4     4 2023-06-11 2019-01-01 00:01:42 k     green medium vctrs::vec_ptype(df) #> # A tibble: 0 × 7 #> # ℹ 7 variables: a <dbl>, b <int>, c <date>, d <dttm>, e <chr>, f <fct>, #> #   g <ord> library(cereal) json <- cereal_to_json(df) json #> { #>   \"a\": { #>     \"type\": \"numeric\", #>     \"example\": \"1.2\", #>     \"details\": [] #>   }, #>   \"b\": { #>     \"type\": \"integer\", #>     \"example\": \"2\", #>     \"details\": [] #>   }, #>   \"c\": { #>     \"type\": \"Date\", #>     \"example\": \"2023-06-09\", #>     \"details\": [] #>   }, #>   \"d\": { #>     \"type\": \"POSIXct\", #>     \"example\": \"2019-01-01 00:01:40\", #>     \"details\": { #>       \"tzone\": \"America/New_York\" #>     } #>   }, #>   \"e\": { #>     \"type\": \"character\", #>     \"example\": \"b\", #>     \"details\": [] #>   }, #>   \"f\": { #>     \"type\": \"factor\", #>     \"example\": \"blue\", #>     \"details\": { #>       \"levels\": [\"blue\", \"green\", \"red\"] #>     } #>   }, #>   \"g\": { #>     \"type\": \"ordered\", #>     \"example\": \"small\", #>     \"details\": { #>       \"levels\": [\"small\", \"medium\", \"large\"] #>     } #>   } #> } cereal_from_json(json) #> # A tibble: 0 × 7 #> # ℹ 7 variables: a <dbl>, b <int>, c <date>, d <dttm>, e <chr>, f <fct>, #> #   g <ord>"},{"path":"/dev/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Serialize vctrs Objects to JSON","text":"project released Contributor Code Conduct. contributing project, agree abide terms. think encountered bug, please submit issue. Either way, learn create share reprex (minimal, reproducible example), clearly communicate code.","code":""},{"path":"/dev/reference/cereal-package.html","id":null,"dir":"Reference","previous_headings":"","what":"cereal: Serialize 'vctrs' Objects to 'JSON' — cereal-package","title":"cereal: Serialize 'vctrs' Objects to 'JSON' — cereal-package","text":"'vctrs' package provides concept vector prototype can especially useful deploying models code. Serialize object prototypes 'JSON' can used check coerce data production systems, deserialize 'JSON' back correct object prototypes.","code":""},{"path":[]},{"path":"/dev/reference/cereal-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"cereal: Serialize 'vctrs' Objects to 'JSON' — cereal-package","text":"Maintainer: Julia Silge julia.silge@posit.co (ORCID) Authors: Davis Vaughan davis@posit.co contributors: Posit Software, PBC [copyright holder, funder]","code":""},{"path":"/dev/reference/cereal_decode.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a JSON-serialized prototype to a vctrs prototype — cereal_decode","title":"Convert a JSON-serialized prototype to a vctrs prototype — cereal_decode","text":"Create vctrs::vec_ptype() JSON-serialized prototype created cereal_encode().","code":""},{"path":"/dev/reference/cereal_decode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a JSON-serialized prototype to a vctrs prototype — cereal_decode","text":"","code":"cereal_decode(x)"},{"path":"/dev/reference/cereal_decode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a JSON-serialized prototype to a vctrs prototype — cereal_decode","text":"x object class \"cereal_*\", \"cereal_integer\" \"cereal_factor\"","code":""},{"path":"/dev/reference/cereal_decode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a JSON-serialized prototype to a vctrs prototype — cereal_decode","text":"vector zero length, integer() vctrs::new_factor()","code":""},{"path":"/dev/reference/cereal_decode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a JSON-serialized prototype to a vctrs prototype — cereal_decode","text":"","code":"cereal_decode(structure(list(), class = \"cereal_integer\")) #> integer(0) cereal_decode(structure(list(), class = \"cereal_Date\")) #> Date of length 0"},{"path":"/dev/reference/cereal_details.html","id":null,"dir":"Reference","previous_headings":"","what":"Find needed details for vctrs prototype — cereal_details","title":"Find needed details for vctrs prototype — cereal_details","text":"Find needed details vctrs prototype","code":""},{"path":"/dev/reference/cereal_details.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find needed details for vctrs prototype — cereal_details","text":"","code":"cereal_details(x)"},{"path":"/dev/reference/cereal_details.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find needed details for vctrs prototype — cereal_details","text":"x vector","code":""},{"path":"/dev/reference/cereal_details.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find needed details for vctrs prototype — cereal_details","text":"list","code":""},{"path":"/dev/reference/cereal_details.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find needed details for vctrs prototype — cereal_details","text":"","code":"cereal_details(factor(letters[1:5], labels = \"letter\")) #> $levels #> [1] \"letter1\" \"letter2\" \"letter3\" \"letter4\" \"letter5\" #>  cereal_details(factor(LETTERS[3:1], ordered = TRUE)) #> $levels #> [1] \"A\" \"B\" \"C\" #>  cereal_details(as.POSIXct(\"2023-01-01\", tz = \"America/New_York\")) #> $tzone #> [1] \"America/New_York\" #>"},{"path":"/dev/reference/cereal_encode.html","id":null,"dir":"Reference","previous_headings":"","what":"Encode a vector as JSON — cereal_encode","title":"Encode a vector as JSON — cereal_encode","text":"Create list encoding vctrs prototype (metadata) can stored JSON.","code":""},{"path":"/dev/reference/cereal_encode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Encode a vector as JSON — cereal_encode","text":"","code":"cereal_encode(x)"},{"path":"/dev/reference/cereal_encode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Encode a vector as JSON — cereal_encode","text":"x vector","code":""},{"path":"/dev/reference/cereal_encode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Encode a vector as JSON — cereal_encode","text":"list can converted JSON jsonlite::toJSON()","code":""},{"path":"/dev/reference/cereal_encode.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Encode a vector as JSON — cereal_encode","text":"Use digits option specify many digits decimal point record JSON, example via withr::local_options().","code":""},{"path":[]},{"path":"/dev/reference/cereal_encode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Encode a vector as JSON — cereal_encode","text":"","code":"cereal_encode(1:10) #> $type #> [1] \"integer\" #>  #> $example #> [1] \"1\" #>  #> $details #> list() #>  cereal_encode(Sys.Date()) #> $type #> [1] \"Date\" #>  #> $example #> [1] \"2025-10-20\" #>  #> $details #> list() #>  cereal_encode(sample(letters, 5)) #> $type #> [1] \"character\" #>  #> $example #> [1] \"o\" #>  #> $details #> list() #>  cereal_encode(factor(letters[1:5], labels = \"letter\")) #> $type #> [1] \"factor\" #>  #> $example #> [1] \"letter1\" #>  #> $details #> $details$levels #> [1] \"letter1\" \"letter2\" \"letter3\" \"letter4\" \"letter5\" #>  #>  cereal_encode(factor(LETTERS[3:1], ordered = TRUE)) #> $type #> [1] \"ordered\" #>  #> $example #> [1] \"C\" #>  #> $details #> $details$levels #> [1] \"A\" \"B\" \"C\" #>  #>   ## you can encode a ptype as well: ptype <- vctrs::vec_ptype(factor(LETTERS[3:1], ordered = TRUE)) ## but \"example\" is NULL: cereal_encode(ptype) #> $type #> [1] \"ordered\" #>  #> $example #> NULL #>  #> $details #> $details$levels #> [1] \"A\" \"B\" \"C\" #>  #>"},{"path":"/dev/reference/cereal_to_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Serialize and deserialize the prototype of a data frame to JSON — cereal_to_json","title":"Serialize and deserialize the prototype of a data frame to JSON — cereal_to_json","text":"function cereal_to_json() serializes vctrs prototype data frame JSON, function cereal_from_json() deserializes JSON prototype back vctrs prototype.","code":""},{"path":"/dev/reference/cereal_to_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Serialize and deserialize the prototype of a data frame to JSON — cereal_to_json","text":"","code":"cereal_to_json(data)  cereal_from_json(x)"},{"path":"/dev/reference/cereal_to_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Serialize and deserialize the prototype of a data frame to JSON — cereal_to_json","text":"data data frame x JSON string","code":""},{"path":"/dev/reference/cereal_to_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Serialize and deserialize the prototype of a data frame to JSON — cereal_to_json","text":"cereal_to_json() returns JSON string like jsonlite::toJSON(), cereal_from_json() returns vctrs ptype, like vctrs::vec_ptype().","code":""},{"path":[]},{"path":"/dev/reference/cereal_to_json.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Serialize and deserialize the prototype of a data frame to JSON — cereal_to_json","text":"","code":"df <- tibble::tibble(     a = 1,     b = 2L,     c = Sys.Date(),     d = as.POSIXct(\"2019-01-01\", tz = \"America/New_York\"),     e = \"x\",     f = factor(\"blue\", levels = c(\"blue\", \"green\", \"red\")),     g = ordered(\"small\", levels = c(\"small\", \"medium\", \"large\")) )  json <- cereal_to_json(df) json #> { #>   \"a\": { #>     \"type\": \"numeric\", #>     \"example\": \"1\", #>     \"details\": [] #>   }, #>   \"b\": { #>     \"type\": \"integer\", #>     \"example\": \"2\", #>     \"details\": [] #>   }, #>   \"c\": { #>     \"type\": \"Date\", #>     \"example\": \"2025-10-20\", #>     \"details\": [] #>   }, #>   \"d\": { #>     \"type\": \"POSIXct\", #>     \"example\": \"2019-01-01\", #>     \"details\": { #>       \"tzone\": \"America/New_York\" #>     } #>   }, #>   \"e\": { #>     \"type\": \"character\", #>     \"example\": \"x\", #>     \"details\": [] #>   }, #>   \"f\": { #>     \"type\": \"factor\", #>     \"example\": \"blue\", #>     \"details\": { #>       \"levels\": [\"blue\", \"green\", \"red\"] #>     } #>   }, #>   \"g\": { #>     \"type\": \"ordered\", #>     \"example\": \"small\", #>     \"details\": { #>       \"levels\": [\"small\", \"medium\", \"large\"] #>     } #>   } #> }   str(cereal_from_json(json)) #> tibble [0 × 7] (S3: tbl_df/tbl/data.frame) #>  $ a: num(0)  #>  $ b: int(0)  #>  $ c: 'Date' num(0)  #>  $ d: 'POSIXct' num(0)  #>  - attr(*, \"tzone\")= chr \"America/New_York\" #>  $ e: chr(0)  #>  $ f: Factor w/ 3 levels \"blue\",\"green\",..:  #>  $ g: Ord.factor w/ 3 levels \"small\"<\"medium\"<..:  ## same as: str(vctrs::vec_ptype(df)) #> tibble [0 × 7] (S3: tbl_df/tbl/data.frame) #>  $ a: num(0)  #>  $ b: int(0)  #>  $ c: 'Date' num(0)  #>  $ d: 'POSIXct' num(0)  #>  - attr(*, \"tzone\")= chr \"America/New_York\" #>  $ e: chr(0)  #>  $ f: Factor w/ 3 levels \"blue\",\"green\",..:  #>  $ g: Ord.factor w/ 3 levels \"small\"<\"medium\"<..:"},{"path":[]},{"path":"/dev/news/index.html","id":"cereal-010","dir":"Changelog","previous_headings":"","what":"cereal 0.1.0","title":"cereal 0.1.0","text":"CRAN release: 2023-06-09 Initial CRAN submission.","code":""}]
